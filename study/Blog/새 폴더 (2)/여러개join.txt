1. 고객 서비스
 - 고객 등록
 - 고객 상세보기
 - 고객 수정
 - 고객 삭제
 - 고객 목록보기

2. 상품 서비스
 - 상품 등록
 - 상품 상세보기
 - 상품 수정
 - 상품 삭제
 - 상품 목록보기


3. 주문 서비스
 - 주문 하기
 - 주문 취소하기 -- 주문을 취소한 로그를 다른 테이블에 insert로 보관한다. ( 취소 정보도 모아야 함 ) 보통 update로 함
 - 고객별 주문 목록보기
  -> 조인으로 보여줌 customerId와 productId로 보여주는게 아니라 고객명과 상품명으로 보여줘야 해서.



--

서비스도 entity별로 만들어야 함.


---

테이블의 정규화

오브젝트를 만들고 관점을 보면서 만들어야함.

영화와 영화관의 관계 -> 영화관에서 영화를 '상영'함 -> 상영이 table

--

select o.id, c.username, p.name, p.price  -- orders 의 id, customer의 username, product의 name, product의 price 선택
FROM orders o                                -- orders를 퍼올리고
INNER JOIN customer c                      -- customer랑 같은거 찾을꺼
on o.customerid = c.id                       -- orders의 customerid랑 customer의 id 같은거 찾아서 username으로 바꺼라
INNER JOIN product p                       -- product랑 같은거 찾을꺼
on o.productid = p.id                        -- orders의 productid랑 product의 id 같은거 찾아서 name으로 바꺼라
WHERE c.id = 1;                               -- 그중에 1번만 보이게 해라


자바로 

이렇게 생긴 entity가 없어서 DTO로 새로운거 만들어줘야함 

join을 쓰면 entity에 못 담는다 생각하면 됨 ( 각자 분리되어 있어서 엮어줄 애가 없음 )

rs로 하기에는 커서를 위로 올릴수가 없다 그래서 안됨

DTO = date transfer object

데이터를 DB에서 java로 전달해주는 애

OrderRespDto : 주문을 응답하는 dto 즉 통신을 위한 애

name = 상품이름 

햇갈려서 별칭을 지어주는게 좋다

기본셋팅하고 바로 OrdersDao로 간다

리턴이랑 ArrayList 내부에 이름 바꿔주고 import하면 됨.

전직원 데이터 불러오듯이 하면 됨.

dto를 쓴 이유 ? 테이블 내부의 값들끼리 묶어놓은 클래스가 없어서 Dto라는 걸 만든거

두개만들었음.

만들고

implements 하면 오류남

재정의가 필요해서 